<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Matt Snider</title>
    <link>https://matt-snider.github.io/tags/python/</link>
    <description>Recent content in Python on Matt Snider</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Â© 2020 Matt Snider</copyright>
    
	<atom:link href="https://matt-snider.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Todoist Taskwarrior</title>
      <link>https://matt-snider.github.io/projects/todoist-taskwarrior/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matt-snider.github.io/projects/todoist-taskwarrior/</guid>
      <description>&lt;p&gt;I think &lt;a href=&#34;https://todoist.com/&#34;&gt;Todoist&lt;/a&gt; is a fantastic productivity app, but I have recently been trying to transition to as mnay open-source &amp;amp; self-hosted tools as possible. This led me to build a tool to migrate all my tasks from Todoist into Taskwarrior.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SOCKS5 Proxy</title>
      <link>https://matt-snider.github.io/projects/socks5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matt-snider.github.io/projects/socks5/</guid>
      <description>&lt;p&gt;I wanted to experiment with Python&amp;rsquo;s asyncio and build some kind of server application. SOCKS is a simple binary protocol that is well documented and easy to implement from the &lt;a href=&#34;https://tools.ietf.org/html/rfc1928&#34;&gt;RFC&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Surf Media Gmbh</title>
      <link>https://matt-snider.github.io/work/surf-media-gmbh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matt-snider.github.io/work/surf-media-gmbh/</guid>
      <description> Designed, implemented and tested web services for an advertising performance network in a Deis-based microservices architecture REST APIs and message consumers using Java/Dropwizard and Python/Flask/DRF AngularJS-based frontend Developed a SOCKS5 proxy server to interface with devices as part of our automated ad-testing infrastructure Mentored more junior coworkers through pair programming &amp;amp; code reviews  </description>
    </item>
    
  </channel>
</rss>